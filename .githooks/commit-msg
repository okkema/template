#!/bin/bash

# get commit message
COMMIT_MESSAGE=$(<$1)

# verify message starts with prefix
PREFIXES=(feat fix chore build ci docs refactor style)
for PREFIX in ${PREFIXES[@]}
do
  if [[ $COMMIT_MESSAGE == $PREFIX:* ]]
  then
    VALID=true
  fi
done
if [ -z $VALID ]
then
  rm .commit
  echo "ERROR - Commit failed"
  echo "Commit message must begin with a valid prefix."
  echo "feat:      New features"
  echo "fix:       Bug and hot fixes"
  echo "test:      Tests only"
  echo "docs:      Docs only"
  echo "build:     Build tools, e.g. npm and git"
  echo "ci:        CI/CD, e.g. workflows and terraform"
  echo "style:     Linting and formatting"
  echo "chore:     Automated tasks, e.g. version bumps"
  echo "refactor:  Other code change"
  exit 1
fi

# check if version keyword, else prerelease with branch name
BUMP="prerelease"
VERSIONS=(premajor preminor prepatch prerelease)
for VERSION in ${VERSIONS[@]}
do
  if [[ $COMMIT_MESSAGE =~ "#$VERSION" ]]
  then
    BUMP=$VERSION
    break
  fi
done

# invoke npm version and tag
PREID=$(git rev-parse --abbrev-ref HEAD | sed -E 's/[^[:alnum:][:space:]]+/-/g')
TAG=$(npm version $BUMP --preid $PREID --git-tag-version false)

# pass tag to post-commit
if [ -e .commit ]
then
  echo $TAG >> .commit
fi
